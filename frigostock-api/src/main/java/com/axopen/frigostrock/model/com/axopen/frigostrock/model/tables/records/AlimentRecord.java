/*
 * This file is generated by jOOQ.
 */
package com.axopen.frigostrock.model.tables.records;


import com.axopen.frigostrock.model.tables.Aliment;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlimentRecord extends TableRecordImpl<AlimentRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.aliment.id</code>.
     */
    public AlimentRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.aliment.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.aliment.name</code>.
     */
    public AlimentRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.aliment.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.aliment.price</code>.
     */
    public AlimentRecord setPrice(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.aliment.price</code>.
     */
    public Integer getPrice() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Aliment.ALIMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Aliment.ALIMENT.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Aliment.ALIMENT.PRICE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getPrice();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getPrice();
    }

    @Override
    public AlimentRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AlimentRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AlimentRecord value3(Integer value) {
        setPrice(value);
        return this;
    }

    @Override
    public AlimentRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlimentRecord
     */
    public AlimentRecord() {
        super(Aliment.ALIMENT);
    }

    /**
     * Create a detached, initialised AlimentRecord
     */
    public AlimentRecord(Integer id, String name, Integer price) {
        super(Aliment.ALIMENT);

        setId(id);
        setName(name);
        setPrice(price);
    }

    /**
     * Create a detached, initialised AlimentRecord
     */
    public AlimentRecord(com.axopen.frigostrock.model.tables.pojos.Aliment value) {
        super(Aliment.ALIMENT);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setPrice(value.getPrice());
        }
    }
}
