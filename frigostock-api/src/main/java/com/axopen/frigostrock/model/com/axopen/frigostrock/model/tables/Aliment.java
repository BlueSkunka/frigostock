/*
 * This file is generated by jOOQ.
 */
package com.axopen.frigostrock.model.tables;


import com.axopen.frigostrock.model.Public;
import com.axopen.frigostrock.model.tables.records.AlimentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Aliment extends TableImpl<AlimentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.aliment</code>
     */
    public static final Aliment ALIMENT = new Aliment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlimentRecord> getRecordType() {
        return AlimentRecord.class;
    }

    /**
     * The column <code>public.aliment.id</code>.
     */
    public final TableField<AlimentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.aliment.name</code>.
     */
    public final TableField<AlimentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.aliment.price</code>.
     */
    public final TableField<AlimentRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER, this, "");

    private Aliment(Name alias, Table<AlimentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Aliment(Name alias, Table<AlimentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.aliment</code> table reference
     */
    public Aliment(String alias) {
        this(DSL.name(alias), ALIMENT);
    }

    /**
     * Create an aliased <code>public.aliment</code> table reference
     */
    public Aliment(Name alias) {
        this(alias, ALIMENT);
    }

    /**
     * Create a <code>public.aliment</code> table reference
     */
    public Aliment() {
        this(DSL.name("aliment"), null);
    }

    public <O extends Record> Aliment(Table<O> child, ForeignKey<O, AlimentRecord> key) {
        super(child, key, ALIMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AlimentRecord, Integer> getIdentity() {
        return (Identity<AlimentRecord, Integer>) super.getIdentity();
    }

    @Override
    public Aliment as(String alias) {
        return new Aliment(DSL.name(alias), this);
    }

    @Override
    public Aliment as(Name alias) {
        return new Aliment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Aliment rename(String name) {
        return new Aliment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Aliment rename(Name name) {
        return new Aliment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
